from django.contrib.contenttypes.fields import GenericRelation
from django.utils.text import slugify
from datetime import date, datetime
from django.utils import timezone
from django.db import models

from versatileimagefield.fields import VersatileImageField
from django.core.files.storage import FileSystemStorage

from .dx_cities import dx_City, dx_County, dx_State, dx_PostalCode, dx_District

from pupa.scrape import Person, Organization


Ps = FileSystemStorage(location='media/maps/districts/')


class Tag(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True)
    slug = models.SlugField(max_length=255, unique=True, blank=True, null=True)

    class Meta:
        ordering = ['name']
        verbose_name = "Tag"
        verbose_name_plural = "Tags"

    def save(self, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name, allow_unicode=True)
        super(Tag, self).save()

    def get_absolute_url(self):
        return "/tag/%s/" % (self.slug)

    def __unicode__(self):
        return self.name


class Platform(models.Model):
    name = models.CharField(max_length=125, blank=True, null=True)
    short_name = models.CharField(max_length=16, blank=True, null=True)
    slug = models.SlugField(max_length=255, unique=True, blank=True, null=True)
    wiki = models.CharField(max_length=125, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    tags = models.ManyToManyField(Tag, blank=True)

    def __unicode__(self):
        return u'%s' % (self.name)

    def save(self, **kwargs):
        if not self.slug:
            self.slug = slugify(unicode(self.name))
        super(Platform, self).save()

    class Meta:
        ordering = ['name']
        verbose_name = 'Platform'
        verbose_name_plural = 'Platforms'

################
# Dex Entities #
################


class BasePerson(Person):
    job = models.CharField(max_length=128,
                           blank=True,
                           null=True)
    alma_mater = models.CharField(max_length=125,
                                  blank=True,
                                  null=True)
    primary_platform = models.ForeignKey(Platform, blank=True,
                                         related_name='pplatforms',
                                         null=True,
                                         on_delete=models.PROTECT)
    other_platforms = models.ManyToManyField(Platform, blank=True,
                                             related_name='oplatforms')
    district = models.ManyToManyField(dx_District,
                                      blank=True,)
    published = models.BooleanField(default=False, blank=True)
    twt_user_id = models.CharField(max_length=256, blank=True, null=True)
    twt_user_desc = models.CharField(max_length=256, blank=True, null=True)
    twt_followers = models.CharField(max_length=128, blank=True, null=True)
    twt_following = models.CharField(max_length=128, blank=True, null=True)
    twt_verified = models.BooleanField(default=False, blank=True)
    tags = models.ManyToManyField(Tag, blank=True)
    notes = models.TextField(blank=True,
                             null=True)

    class Meta:
        verbose_name = 'Basic Folk'
        verbose_name_plural = 'Basic Folks'


class Org(Organization):
    name = models.CharField(max_length=512, blank=True, null=True)
    slug = models.SlugField(max_length=255, unique=True, blank=True, null=True)
    org_type = models.CharField(max_length=64, blank=True, null=True)
    short_name = models.CharField(max_length=8, blank=True, null=True)
#    industry = models.ForeignKey('digiscraps.Industry', default=None, null=True,
#                                 blank=True)
    platforms = models.ManyToManyField(Platform, blank=True)
    website = models.CharField(max_length=125, blank=True, null=True)
    wiki = models.CharField(max_length=125, blank=True, null=True)
    population = models.IntegerField(blank=True, null=True)
    legislative_district = models.ManyToManyField(dx_District, blank=True)
#    district_label = models.CharField(max_length=2, blank=True, null=False)
    published = models.BooleanField(default=False, blank=True)
    address = models.CharField(max_length=128,
                               blank=True,
                               null=True)
    digicity = models.ForeignKey(dx_City,
                                 blank=True,
                                 #                             to_field='slug',
                                 null=True,
                                 on_delete=models.PROTECT)
    city_str = models.CharField(max_length=128,
                                blank=True,
                                null=True)
    digistate = models.ForeignKey(dx_State, blank=True, null=True, on_delete=models.PROTECT)
    zip_code = models.CharField(max_length=15,
                                blank=True,
                                null=True)
    twt_user_id = models.CharField(max_length=256, blank=True, null=True)
    twt_user_desc = models.CharField(max_length=256, blank=True, null=True)
    twt_followers = models.CharField(max_length=128, blank=True, null=True)
    twt_following = models.CharField(max_length=128, blank=True, null=True)
    twt_verified = models.BooleanField(default=False, blank=True)
    tags = models.ManyToManyField(Tag, blank=True)
    notes = models.TextField(blank=True,
                             null=True)

    def __unicode__(self):
        return u'%s' % (self.name)

    def get_absolute_url(self):
        return "/%s/" % (self.slug)

    def save(self, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name, allow_unicode=True)
        super(Org, self).save()

    class Meta:
        ordering = ['org_name']
        verbose_name = 'Organization'
        verbose_name_plural = 'Organizations'
        unique_together = ("slug", "website")


class Staff(models.Model):
    org = models.ManyToManyField(Org, blank=False)
    mgmt = models.ManyToManyField(BasePerson, blank=False)
    name = models.CharField(max_length=128,
                            blank=False,
                            null=False)
    position = models.CharField(max_length=64, blank=False, null=False)
    email = models.CharField(max_length=128, blank=True, null=True)
    pnumber = models.CharField(max_length=64,
                               blank=True,
                               null=True)

    def __unicode__(self):
        return u'%s, %s' % (self.name, self.position)

    def __str__(self):
        return u'%s, %s' % (self.name, self.position)


class SocialOutput(models.Model):
    office = models.ForeignKey(
        'Org',
        blank=True,
        null=True,
        related_name='social_output',
        on_delete=models.PROTECT)
    official = models.ForeignKey(BasePerson, blank=True, null=True, on_delete=models.PROTECT)
    op_type = models.CharField(max_length=128,
                               blank=False,
                               null=False)
    op_id = models.CharField(max_length=64, blank=False, null=False)
    timedate = models.DateTimeField(auto_now_add=False, blank=True, null=True)
    title = models.CharField(max_length=128, blank=True, null=True)
    message = models.TextField(blank=True, null=True)

    def __unicode__(self):
        return u'%s, %s' % (self.op_type, self.title)

    def __str__(self):
        return u'%s, %s' % (self.op_type, self.title)

    class Meta:
        verbose_name_plural = 'Social Outputs'
        ordering = ['op_type', '-timedate', ]


class Endorsement(models.Model):
    org = models.ForeignKey(Org, on_delete=models.PROTECT)
 #   candidate = models.ForeignKey(PublicOfficial)

    class Meta:
        verbose_name_plural = 'Endorsements'
        verbose_name = 'Endorsement'
